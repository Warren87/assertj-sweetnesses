package domainobjects;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Tag} specific assertions - Generated by CustomAssertionGenerator.
 */

public abstract class AbstractTagAssert<S extends AbstractTagAssert<S, A>, A extends Tag> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTagAssert}</code> to make assertions on actual Tag.
   * @param actual the Tag we want to make assertions on.
   */
  protected AbstractTagAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Tag's group is equal to the given one.
   * @param group the given group to compare the actual Tag's group to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Tag's group is not equal to the given one.
   */
  public S hasGroup(String group) {
    // check that actual Tag we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting group of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualGroup = actual.getGroup();
    if (!Objects.areEqual(actualGroup, group)) {
      failWithMessage(assertjErrorMessage, actual, group, actualGroup);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Tag's text is equal to the given one.
   * @param text the given text to compare the actual Tag's text to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Tag's text is not equal to the given one.
   */
  public S hasText(String text) {
    // check that actual Tag we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualText = actual.getText();
    if (!Objects.areEqual(actualText, text)) {
      failWithMessage(assertjErrorMessage, actual, text, actualText);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
