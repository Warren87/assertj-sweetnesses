package gson;

import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link JsonElement} specific assertions - Generated by CustomAssertionGenerator.
 */
public abstract class AbstractJsonElementAssert<S extends AbstractJsonElementAssert<S, A>, A extends JsonElement> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractJsonElementAssert}</code> to make assertions on actual JsonElement.
   * @param actual the JsonElement we want to make assertions on.
   */
  protected AbstractJsonElementAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual JsonElement's asBigDecimal is equal to the given one.
   * @param asBigDecimal the given asBigDecimal to compare the actual JsonElement's asBigDecimal to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asBigDecimal is not equal to the given one.
   */
  public S hasAsBigDecimal(java.math.BigDecimal asBigDecimal) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asBigDecimal of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigDecimal actualAsBigDecimal = actual.getAsBigDecimal();
    if (!Objects.areEqual(actualAsBigDecimal, asBigDecimal)) {
      failWithMessage(assertjErrorMessage, actual, asBigDecimal, actualAsBigDecimal);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asBigInteger is equal to the given one.
   * @param asBigInteger the given asBigInteger to compare the actual JsonElement's asBigInteger to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asBigInteger is not equal to the given one.
   */
  public S hasAsBigInteger(java.math.BigInteger asBigInteger) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asBigInteger of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigInteger actualAsBigInteger = actual.getAsBigInteger();
    if (!Objects.areEqual(actualAsBigInteger, asBigInteger)) {
      failWithMessage(assertjErrorMessage, actual, asBigInteger, actualAsBigInteger);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asBoolean is equal to the given one.
   * @param asBoolean the given asBoolean to compare the actual JsonElement's asBoolean to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asBoolean is not equal to the given one.
   */
  public S hasAsBoolean(boolean asBoolean) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asBoolean of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    boolean actualAsBoolean = actual.getAsBoolean();
    if (actualAsBoolean != asBoolean) {
      failWithMessage(assertjErrorMessage, actual, asBoolean, actualAsBoolean);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asByte is equal to the given one.
   * @param asByte the given asByte to compare the actual JsonElement's asByte to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asByte is not equal to the given one.
   */
  public S hasAsByte(byte asByte) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asByte of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    byte actualAsByte = actual.getAsByte();
    if (actualAsByte != asByte) {
      failWithMessage(assertjErrorMessage, actual, asByte, actualAsByte);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asCharacter is equal to the given one.
   * @param asCharacter the given asCharacter to compare the actual JsonElement's asCharacter to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asCharacter is not equal to the given one.
   */
  public S hasAsCharacter(char asCharacter) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asCharacter of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check asCharacter char matches
    char actualAsCharacter = actual.getAsCharacter();
    if (actualAsCharacter != asCharacter) {
      failWithMessage(assertjErrorMessage, actual, asCharacter, actualAsCharacter);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asDouble is equal to the given one.
   * @param asDouble the given asDouble to compare the actual JsonElement's asDouble to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asDouble is not equal to the given one.
   */
  public S hasAsDouble(double asDouble) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asDouble of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for asDouble
    double actualAsDouble = actual.getAsDouble();
    if (actualAsDouble != asDouble) {
      failWithMessage(assertjErrorMessage, actual, asDouble, actualAsDouble);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asDouble is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param asDouble the value to compare the actual JsonElement's asDouble to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asDouble is not close enough to the given value.
   */
  public S hasAsDoubleCloseTo(double asDouble, double assertjOffset) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    double actualAsDouble = actual.getAsDouble();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting asDouble:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualAsDouble, asDouble, assertjOffset, Math.abs(asDouble - actualAsDouble));

    // check
    Assertions.assertThat(actualAsDouble).overridingErrorMessage(assertjErrorMessage).isCloseTo(asDouble, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asFloat is equal to the given one.
   * @param asFloat the given asFloat to compare the actual JsonElement's asFloat to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asFloat is not equal to the given one.
   */
  public S hasAsFloat(float asFloat) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asFloat of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for asFloat
    float actualAsFloat = actual.getAsFloat();
    if (actualAsFloat != asFloat) {
      failWithMessage(assertjErrorMessage, actual, asFloat, actualAsFloat);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asFloat is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param asFloat the value to compare the actual JsonElement's asFloat to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asFloat is not close enough to the given value.
   */
  public S hasAsFloatCloseTo(float asFloat, float assertjOffset) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    float actualAsFloat = actual.getAsFloat();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting asFloat:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualAsFloat, asFloat, assertjOffset, Math.abs(asFloat - actualAsFloat));

    // check
    Assertions.assertThat(actualAsFloat).overridingErrorMessage(assertjErrorMessage).isCloseTo(asFloat, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asInt is equal to the given one.
   * @param asInt the given asInt to compare the actual JsonElement's asInt to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asInt is not equal to the given one.
   */
  public S hasAsInt(int asInt) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asInt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualAsInt = actual.getAsInt();
    if (actualAsInt != asInt) {
      failWithMessage(assertjErrorMessage, actual, asInt, actualAsInt);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonArray contains the given JsonElement elements.
   * @param asJsonArray the given elements that should be contained in actual JsonElement's asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray does not contain all given JsonElement elements.
   */
  public S hasAsJsonArray(JsonElement... asJsonArray) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that given JsonElement varargs is not null.
    if (asJsonArray == null) failWithMessage("Expecting asJsonArray parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAsJsonArray(), asJsonArray);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonArray contains the given JsonElement elements in Collection.
   * @param asJsonArray the given elements that should be contained in actual JsonElement's asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray does not contain all given JsonElement elements.
   */
  public S hasAsJsonArray(java.util.Collection<? extends JsonElement> asJsonArray) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that given JsonElement collection is not null.
    if (asJsonArray == null) {
      failWithMessage("Expecting asJsonArray parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getAsJsonArray(), asJsonArray.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonArray contains <b>only</b> the given JsonElement elements and nothing else in whatever order.
   * @param asJsonArray the given elements that should be contained in actual JsonElement's asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray does not contain all given JsonElement elements.
   */
  public S hasOnlyAsJsonArray(JsonElement... asJsonArray) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that given JsonElement varargs is not null.
    if (asJsonArray == null) failWithMessage("Expecting asJsonArray parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAsJsonArray(), asJsonArray);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonArray contains <b>only</b> the given JsonElement elements in Collection and nothing else in whatever order.
   * @param asJsonArray the given elements that should be contained in actual JsonElement's asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray does not contain all given JsonElement elements.
   */
  public S hasOnlyAsJsonArray(java.util.Collection<? extends JsonElement> asJsonArray) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that given JsonElement collection is not null.
    if (asJsonArray == null) {
      failWithMessage("Expecting asJsonArray parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getAsJsonArray(), asJsonArray.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonArray does not contain the given JsonElement elements.
   *
   * @param asJsonArray the given elements that should not be in actual JsonElement's asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray contains any given JsonElement elements.
   */
  public S doesNotHaveAsJsonArray(JsonElement... asJsonArray) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that given JsonElement varargs is not null.
    if (asJsonArray == null) failWithMessage("Expecting asJsonArray parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAsJsonArray(), asJsonArray);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonArray does not contain the given JsonElement elements in Collection.
   *
   * @param asJsonArray the given elements that should not be in actual JsonElement's asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray contains any given JsonElement elements.
   */
  public S doesNotHaveAsJsonArray(java.util.Collection<? extends JsonElement> asJsonArray) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that given JsonElement collection is not null.
    if (asJsonArray == null) {
      failWithMessage("Expecting asJsonArray parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getAsJsonArray(), asJsonArray.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement has no asJsonArray.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonElement's asJsonArray is not empty.
   */
  public S hasNoAsJsonArray() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have asJsonArray but had :\n  <%s>";

    // check
    if (actual.getAsJsonArray().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAsJsonArray());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual JsonElement's asJsonNull is equal to the given one.
   * @param asJsonNull the given asJsonNull to compare the actual JsonElement's asJsonNull to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asJsonNull is not equal to the given one.
   */
  public S hasAsJsonNull(JsonNull asJsonNull) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asJsonNull of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    JsonNull actualAsJsonNull = actual.getAsJsonNull();
    if (!Objects.areEqual(actualAsJsonNull, asJsonNull)) {
      failWithMessage(assertjErrorMessage, actual, asJsonNull, actualAsJsonNull);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonObject is equal to the given one.
   * @param asJsonObject the given asJsonObject to compare the actual JsonElement's asJsonObject to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asJsonObject is not equal to the given one.
   */
  public S hasAsJsonObject(JsonObject asJsonObject) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asJsonObject of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    JsonObject actualAsJsonObject = actual.getAsJsonObject();
    if (!Objects.areEqual(actualAsJsonObject, asJsonObject)) {
      failWithMessage(assertjErrorMessage, actual, asJsonObject, actualAsJsonObject);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asJsonPrimitive is equal to the given one.
   * @param asJsonPrimitive the given asJsonPrimitive to compare the actual JsonElement's asJsonPrimitive to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asJsonPrimitive is not equal to the given one.
   */
  public S hasAsJsonPrimitive(JsonPrimitive asJsonPrimitive) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asJsonPrimitive of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    JsonPrimitive actualAsJsonPrimitive = actual.getAsJsonPrimitive();
    if (!Objects.areEqual(actualAsJsonPrimitive, asJsonPrimitive)) {
      failWithMessage(assertjErrorMessage, actual, asJsonPrimitive, actualAsJsonPrimitive);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asLong is equal to the given one.
   * @param asLong the given asLong to compare the actual JsonElement's asLong to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asLong is not equal to the given one.
   */
  public S hasAsLong(long asLong) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asLong of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualAsLong = actual.getAsLong();
    if (actualAsLong != asLong) {
      failWithMessage(assertjErrorMessage, actual, asLong, actualAsLong);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asNumber is equal to the given one.
   * @param asNumber the given asNumber to compare the actual JsonElement's asNumber to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asNumber is not equal to the given one.
   */
  public S hasAsNumber(Number asNumber) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Number actualAsNumber = actual.getAsNumber();
    if (!Objects.areEqual(actualAsNumber, asNumber)) {
      failWithMessage(assertjErrorMessage, actual, asNumber, actualAsNumber);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asShort is equal to the given one.
   * @param asShort the given asShort to compare the actual JsonElement's asShort to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asShort is not equal to the given one.
   */
  public S hasAsShort(short asShort) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asShort of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    short actualAsShort = actual.getAsShort();
    if (actualAsShort != asShort) {
      failWithMessage(assertjErrorMessage, actual, asShort, actualAsShort);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement's asString is equal to the given one.
   * @param asString the given asString to compare the actual JsonElement's asString to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement's asString is not equal to the given one.
   */
  public S hasAsString(String asString) {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting asString of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAsString = actual.getAsString();
    if (!Objects.areEqual(actualAsString, asString)) {
      failWithMessage(assertjErrorMessage, actual, asString, actualAsString);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is json array.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is not json array.
   */
  public S isJsonArray() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isJsonArray()) {
      failWithMessage("\nExpecting that actual JsonElement is json array but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is not json array.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is json array.
   */
  public S isNotJsonArray() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isJsonArray()) {
      failWithMessage("\nExpecting that actual JsonElement is not json array but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is json null.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is not json null.
   */
  public S isJsonNull() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isJsonNull()) {
      failWithMessage("\nExpecting that actual JsonElement is json null but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is not json null.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is json null.
   */
  public S isNotJsonNull() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isJsonNull()) {
      failWithMessage("\nExpecting that actual JsonElement is not json null but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is json object.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is not json object.
   */
  public S isJsonObject() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isJsonObject()) {
      failWithMessage("\nExpecting that actual JsonElement is json object but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is not json object.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is json object.
   */
  public S isNotJsonObject() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isJsonObject()) {
      failWithMessage("\nExpecting that actual JsonElement is not json object but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is json primitive.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is not json primitive.
   */
  public S isJsonPrimitive() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isJsonPrimitive()) {
      failWithMessage("\nExpecting that actual JsonElement is json primitive but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual JsonElement is not json primitive.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonElement is json primitive.
   */
  public S isNotJsonPrimitive() {
    // check that actual JsonElement we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isJsonPrimitive()) {
      failWithMessage("\nExpecting that actual JsonElement is not json primitive but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
